	: CAT-oneline1 "MEOW!" ;
	: CAT-oneline2 "MEW! MEW!" ;
	: CAT-oneline3 "HISS!" ;
	: CAT-oneline4 "ROOOOOOORW!" ;

	deck-new
		card: CAT-oneline1
		card: CAT-oneline2
		card: CAT-oneline3
		card: CAT-oneline4
	constant CAT-ONELINERS
	CAT-ONELINERS var cat-oneliners
	CAT-ONELINERS shuffles to cat-oneliners

	: CAT-emote1 " starts coughing up a hairball." ;
	: CAT-emote2 " tries to lie down comfortably, but is too big." ;
	: CAT-emote3 " purrs." ;
	: CAT-emote4 " sheds copious amounts of fur." ;
	: CAT-emote5 " claws up the interior." ;
	: CAT-emote6 " menaces with murderous intent." ;
	: CAT-emote7 ($ " squints " .. chis .. " eyes as " .. chis .. " tail flicks around." $) ;
	: CAT-emote8 " sits completely still and stares at nothing." ;
	: CAT-emote9 " hisses randomly." ;
	: CAT-emote10 " falls asleep." ;
	: CAT-emote11 ($ " starts grooming " .. chim .. "self." $) ;
	: CAT-emote12 " whines." ;


	deck-new
		card: CAT-emote1
		card: CAT-emote2
		card: CAT-emote3
		card: CAT-emote4
		card: CAT-emote5
		card: CAT-emote6
		card: CAT-emote7
		card: CAT-emote8
		card: CAT-emote9
		card: CAT-emote10
		card: CAT-emote11
		card: CAT-emote12
	constant CAT-EMOTES
	CAT-EMOTES var cat-emotes
	CAT-EMOTES shuffles to cat-emotes
	
: cat-oneliner
	cat-oneliners depths 0= if CAT-ONELINERS shuffles to cat-oneliners then
	blurbslot 0= if
		drawcard blurbsay
	then
;

: cat-emote
	cat-emotes depths 0= if CAT-EMOTES shuffles to cat-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. cat-emotes drawcard $) txt
	then
;

	deck-new
	12 cards: cat-emote
	4 cards: cat-oneliner

	constant BLURB-CAT-DECK
	BLURB-CAT-DECK var blurb-cat-deck
	BLURB-CAT-DECK shuffles to blurb-cat-deck
	
// Generic pet emotes as a failsafe
	
	: PET-emote1 " slowly ruins the interior of the car." ;
	: PET-emote2 " gets everything steadily more filthy." ;
	: PET-emote3 " takes up valuable resources and should be eaten." ;
	: PET-emote4 " acts all lazy." ;
	: PET-emote5 " is sort of cute but not really." ;
		
	deck-new
		card: PET-emote1
		card: PET-emote2
		card: PET-emote3
		card: PET-emote4
		card: PET-emote5
	constant PET-EMOTES
	PET-EMOTES var pet-emotes
	PET-EMOTES shuffles to pet-emotes
	
	: pet-emote
	pet-emotes depths 0= if PET-EMOTES shuffles to pet-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. pet-emotes drawcard $) txt
	then
;
	
	deck-new
	5 cards: pet-emote
	
	constant BLURB-PET-DECK
	BLURB-PET-DECK var blurb-pet-deck
	BLURB-PET-DECK shuffles to blurb-pet-deck
	
// Goat Emotes

	: GOAT-emote1 " bleats." ;
	: GOAT-emote2 " thrashes around in its seat." ;
	: GOAT-emote3 " eats part of the upholstery." ;
	: GOAT-emote4 " stares at things with its weird eye." ;
	: GOAT-emote5 " does goat things." ;
		
	deck-new
		card: GOAT-emote1
		card: GOAT-emote2
		card: GOAT-emote3
		card: GOAT-emote4
		card: GOAT-emote5
	constant GOAT-EMOTES
	GOAT-EMOTES var goat-emotes
	GOAT-EMOTES shuffles to goat-emotes
	
	: goat-emote
	goat-emotes depths 0= if GOAT-EMOTES shuffles to goat-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. goat-emotes drawcard $) txt
	then
;
	
	deck-new
	5 cards: goat-emote
	
	constant BLURB-GOAT-DECK
	BLURB-GOAT-DECK var blurb-goat-deck
	BLURB-GOAT-DECK shuffles to blurb-goat-deck
	
// Pig Emotes

	: PIG-emote1 " oinks." ;
	: PIG-emote2 " sits in its seat quietly." ;
	: PIG-emote3 " squeals a little." ;
	: PIG-emote4 " snorts for a bit." ;
	: PIG-emote5 " waggles its ears." ;
		
	deck-new
		card: PIG-emote1
		card: PIG-emote2
		card: PIG-emote3
		card: PIG-emote4
		card: PIG-emote5
	constant PIG-EMOTES
	PIG-EMOTES var pig-emotes
	PIG-EMOTES shuffles to pig-emotes
	
	: pig-emote
	pig-emotes depths 0= if PIG-EMOTES shuffles to pig-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. pig-emotes drawcard $) txt
	then
;
	
	deck-new
	5 cards: pig-emote
	
	constant BLURB-PIG-DECK
	BLURB-PIG-DECK var blurb-pig-deck
	BLURB-PIG-DECK shuffles to blurb-pig-deck
	
	
