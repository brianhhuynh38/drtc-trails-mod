// Variables that are used everywhere and have dependency issues due to where they were defined

// TODO:
// - move dependencies to the correct files so that the order of usage make sense.

// TODO: Move configuration somewhere else

// ====== //
// CONFIG //
// ====== //

// How long after death to trigger main-event-mission-killed
// 60 3 * killed_countdown!
60 1 * killed_countdown!

0 value need-save
0 value last-saved

// ===============
// Dates and stuff
// ===============

// Check if a date is CHINESE NEW YEAR (using year and day between 0-364)
// - It will cover 3-4 days due to the granularity of moon phase calculation, but that'll give people more time to
// catch it
// - Always falls between Jan 21 and Feb 21
: yd-chinese-new-year? args( y d )
	// If not a new moon...
	<- y <- d moonphaseyd if false then;

	// If outside of date range...
	<- d 20 < if false then;
	<- d 51 > if false then;
	true
;


// Is it Chinese New year now?
: chinese-new-year? time.year time.year.day yd-chinese-new-year? ;


// Sp00ky stuff

0 debugvar halloween_debug

// Check if a month/day falls within the special Steam Hallowe'en period
// - Using 0-based month because that's what the time functions do
: md-steam-halloween? args( m d )
	<- m 9 = <- d 24 > and if 1 then;
	<- m 10 = <- d 1 = and if 1 then;
	0
;

// Debug test, pass in the date you want to check for and it will set the debug flag to make halloween happen!
: md-steam-halloween-debug-test ( m d ) md-steam-halloween? to halloween_debug ;

// Actual time halloween check
: halloween? time.month time.month.day md-steam-halloween? halloween_debug or ;


// : halloween? time.month 9 = time.month.day 31 = and halloween_debug or ;

: fullmoon? time.moonphase 4 = ;
: newmoon? time.moonphase 0 = ;
: friday_the_13th? time.week.day 5 = time.month.day 13 = and ;


// A way to schedule game saves
: need-to-save 1 to need-save ;

: try-to-save
	need-save not if then;
	madticks last-saved = if then;
	madticks to last-saved
	save-the-game 0 to need-save
;

// Road stuff
road{
	1 value diff-scalar
	15 value nearcanada-day
	0 value specialchar-mode
	0 value familiar-mode
	0 value easybandit-mode
	
	0 value road-countdown
	0 value road-event-turn
	0 value road-trip-days
	0 value calendar-days

	: calendar-day+ ' calendar-days +! ;

	: road-delay main-event-period! ;

	0 stack var road-stack

	: pause-scene 0.1 main-event-pause! ;

	: check-road-stack
		road-stack depths 0= if false then;
		road-stack pops execute
		road-stack depths 0= if 2 road-delay true then;

		pause-scene -1 road-delay

		true
	;
}


: stack-road-action road{
	road-stack swap shove drop
	pause-scene -1 road-delay
} ;

0 value game-recruits-count

: .recruit .recruit ' game-recruits-count ++ ;

// Globally override char generation defaults here
: .default-ai-setup args( chara )

	<- chara .ai_defaults // SYSTEM AI defaults

	60 		<- chara .ai.threat_radius!
	30 		<- chara .ai.threat_dist_base!	
	5 		<- chara .ai.threat_count_base!				

	1		<- chara .ai.threat_respond_chance!
	0.9 	<- chara .ai.threat_threshold!
	0.8		<- chara .ai.threat_relax_chance!
	
	32 <- chara .ai.flee_dist!
//	15 <- chara .ai.flee_dist!
;

: extrahatcheck 
	// 15 for 2 challenge statues, 29 hats currently
	gstats{ challenge-statue1 } 1 < if 0 else 
		gstats{ challenge-statue1 } 2 < if 9 else 
			gstats{ challenge-statue1 } 3 < if 15 else
					gstats{ challenge-statue1 } 4 < if 27 else 45
				then
			then 
		then
	then unlock_extra_hats! 
;
extrahatcheck

: extraglassescheck
	gstats{ challenge-statue1 } 2 < if 0 else 8
	then unlock_extra_glasses! 
;
extraglassescheck

16 skin_roll_max!

: char-gen char-gen args( chara )

		// Happy Halloween
		halloween? if 
			70 %chance if
				0 10 rnd case
					0 of 1 endof
					1 of 78 endof
					2 of 73 endof
					3 of 83 endof
					4 of 66 endof
					5 of 51 endof
					6 of 85 dup <- chara .specialbody! endof
					otherwise 80
				endcase

				<- chara .specialhead!

				33 %chance if 50 %chance if 80 else 85 then <- chara .specialbody! else
					20 %chance if 78 <- chara .specialbody! then
				then
			else
				50 %chance if 80 else 78 then <- chara .specialbody!
				50 %chance if 0 75 rnd <- chara .specialhead! then
			then
		then
		
	3 <- chara .charm! // Noticed that this stat was being assigned but not used, so it's now set to 3
	
	// General thoughts: A lot of the new character options in LIVER are unusual, so probably shouldn't be used for random characters. The below would make them for custom characters, only
	0 15 rnd <- chara .skincolour! // skin colors 16 through 23 are new in LIVER
	0 30 rnd <- chara .headtype! // heads 28 through 31 are new in LIVER, moving the weirdest ones to last
	
	<- chara .default-ai-setup
	<- chara
;

(* Defaults and notes
	60 		<- chara .ai.threat_radius!					// Radius within which they check for zombies
	30 		<- chara .ai.threat_dist_base!				// Distance they think is getting dangerous
	5 		<- chara .ai.threat_count_base!				// Number of zombies before they start to really care

	0.9 	<- chara .ai.threat_threshold!				// THREAT LEVEL that is considered dangerous
	1		<- chara .ai.threat_respond_chance!			// Chance to go into THREAT MODE once threat level reached
	0.8		<- chara .ai.threat_relax_chance!			// Chance to go out of THREAT MODE once threat level reduced
	0		<- chara .ai.rush_chance! // 1 for more aggression
	2		<- chara .ai.attack_level! // 4 for only grapple, 2 default, 0 is killem all
		
	// Extras
	1 	<- chara .ai.safety_threshold! // Set when they flock closer due to threat?

	4 <- chara .ai.flock_dist!
	10 <- chara .ai.flee_dist!
	30 <- chara .ai.follow_leash!
	60 <- chara .ai.safety_leash!
	45 <- chara .ai.ranged_leash!
*)


0 value recruitee

voc{ cyoa

}

: road? game.location LOCATION_ROAD = ;
: mission? game.location LOCATION_MISSION = ;

